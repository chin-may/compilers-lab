//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   String[] regstr = { " $a0 " ,  " $a1 " ,  " $a2 " ,  " $a3 " ,  " $t0 " ,  " $t1 " ,  " $t2 " ,  " $t3 " ,  " $t4 " ,  " $t5 " ,  " $t6 " ,  " $t7 " ,  " $s0 " ,  " $s1 " ,  " $s2 " ,  " $s3 " ,  " $s4 " ,  " $s5 " ,  " $s6 " ,  " $s7 " ,  " $t8 " ,  " $t9 " ,  " $v0 " ,  " $v1 "};
   boolean lbflag = true;
   int amagic, cmagic;
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> <EOF>
    */
   public R visit(Goal n) {
	   
	  int a, b, c; 
	  a = Integer.parseInt(n.f2.f0.tokenImage);
	  b = Integer.parseInt(n.f5.f0.tokenImage);
	  c = Integer.parseInt(n.f8.f0.tokenImage);
	  if(a>4)
		  amagic = a - 4;
	  else
		  amagic = 0;
	  
	  if(c>4)
		  cmagic = c - 4;
	  else
		  cmagic = 0;
	   
	   
	  emit(".text");
	  emit(".globl    main\nmain:");
	  emit("move $fp , $sp");
	  emit("subu $sp, $sp, " + ((cmagic + b)*4 + 4));
	  emit("sw $ra , -4($fp)");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      
      emit("lw $ra , -4($fp)");
      emit("addu $sp , $sp " + ((cmagic + b)*4 + 4));
      emit("j $ra");
      emit("\n");
      n.f12.accept(this);
      n.f13.accept(this);
      emit(".text\n         .globl _halloc\n_halloc:\n         li $v0, 9\n     " +
      		"    syscall\n         j $ra\n\n         .text\n         .globl _print\n_print:\n     " +
      		"    li $v0, 1\n         syscall\n         la $a0, newl\n         li $v0, 4\n    " +
      		"     syscall\n         j $ra\n\n         .data\n         .align   0\nnewl:    .asciiz \"\\n\" \n      " +
      		"   .data\n         .align   0\nstr_er:  .asciiz \" ERROR: abnormal termination\\n\" \n");
 
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
//      n.f0.accept(this);
      for(Node cs:n.f0.nodes){
    	  lbflag = true;
    	  cs.accept(this);
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n) {
	   
	  int a, b, c; 
	  a = Integer.parseInt(n.f2.f0.tokenImage);
	  b = Integer.parseInt(n.f5.f0.tokenImage);
	  c = Integer.parseInt(n.f8.f0.tokenImage);
	  if(a>4)
		  amagic = a - 4;
	  else
		  amagic = 0;
	  
	  if(c>4)
		  cmagic = c - 4;
	  else
		  cmagic = 0;
	  
	  emit(".text");
	  emit(".globl    " + n.f0.f0.tokenImage);
	  emit(n.f0.f0.tokenImage + ":");
	  emit("sw $fp , -8($sp)");
	  emit("move $fp , $sp");
	  emit("subu $sp, $sp, " + ((cmagic + b)*4 + 8));
	  emit("sw $ra , -4($fp)");
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      emit("lw $ra , -4($fp)");
      emit("lw $fp ,"+ ((cmagic + b)*4) + "($sp)");
      emit("addu $sp , $sp " + ((cmagic + b)*4 + 8));
      emit("j $ra");
      emit("\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      lbflag = false;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      emit("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
	   emit("li $v0, 4");
       emit("la $a0, str_er");
       emit("syscall");
       emit("li $v0, 10");
       emit("syscall ");
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      emit("beqz " + regstr[n.f1.f0.which] + " , " + n.f2.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      emit("b " + n.f1.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      emit("sw" +regstr[n.f3.f0.which] + " , " + n.f2.f0.tokenImage +  "("+ regstr[n.f1.f0.which] + ") "  );
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      emit("lw" + regstr[n.f1.f0.which] + " , " + n.f3.f0.tokenImage +  "("+ regstr[n.f2.f0.which] + ") ");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      switch(n.f2.f0.which){
      case 0:
    	  HAllocate h = (HAllocate) n.f2.f0.choice;
    	  if(h.f1.f0.which == 0){
    		  emit("move $a0 ," + regstr[((Reg)h.f1.f0.choice).f0.which]);
    		  emit("jal _halloc");
    		  emit("move " + regstr[n.f1.f0.which] + ", $v0 ");
    	  }
    	  else {
    		  emit("li $a0 ," + ((IntegerLiteral)h.f1.f0.choice).f0.tokenImage);
    		  emit("jal _halloc");
    		  emit("move " + regstr[n.f1.f0.which] + ", $v0 ");
    		  
    	  }
    	  break;
    	  
      case 1:
    	  BinOp b = (BinOp) n.f2.f0.choice;
    	  switch(b.f0.f0.which){
    	  case 0:
    		  if(b.f2.f0.which == 0){
    			  emit("slt " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +","+ regstr[((Reg)b.f2.f0.choice).f0.which]);
    		  }
    		  else{
    			  emit("slti " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +","+ ((IntegerLiteral)b.f2.f0.choice).f0.tokenImage);
    		  }
    		  break;
    	  case 1:
    		  if(b.f2.f0.which == 0){
    			  emit("add " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +","+ regstr[((Reg)b.f2.f0.choice).f0.which]);
    		  }
    		  else{
    			  emit("add " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +","+ ((IntegerLiteral)b.f2.f0.choice).f0.tokenImage);
    		  }
    		  break;
    	  case 2:
    		  if(b.f2.f0.which == 0){
    			  emit("sub " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +","+ regstr[((Reg)b.f2.f0.choice).f0.which]);
    		  }
    		  else{
    			  emit("sub " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +"," + ((IntegerLiteral)b.f2.f0.choice).f0.tokenImage);
    		  }
    		  break;
    	  case 3:
    		  if(b.f2.f0.which == 0){
    			  emit("mul " + regstr[n.f1.f0.which] +","+ regstr[b.f1.f0.which] +","+ regstr[((Reg)b.f2.f0.choice).f0.which]);
    		  }
    		  else{
    			  emit("mul " + regstr[n.f1.f0.which] + regstr[b.f1.f0.which] +  ((IntegerLiteral)b.f2.f0.choice).f0.tokenImage);
    		  }
    		  break;
    		  
    	  }
    	  break;
    	  
      case 2:
    	  SimpleExp s = (SimpleExp) n.f2.f0.choice;
    	  switch(s.f0.which){
    	  case 0:
			  emit("move " + regstr[n.f1.f0.which] +","+ regstr[((Reg)((SimpleExp)n.f2.f0.choice).f0.choice).f0.which]);
			  break;
    	  case 1:
    		  emit("li "+ regstr[n.f1.f0.which] +","+ ((IntegerLiteral)s.f0.choice).f0.tokenImage);
    		  break;
    	  case 2:
    		  emit("la "+ regstr[n.f1.f0.which] +","+ ((Label)s.f0.choice).f0.tokenImage );
    		  break;
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      if(n.f1.f0.which == 0){
    	  emit("move $a0 ," + regstr[((Reg)n.f1.f0.choice).f0.which]);
    	  emit("jal _print");
    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      int num = Integer.parseInt(n.f2.f1.f0.tokenImage);
      if(num < amagic)
	      emit("lw" + regstr[n.f1.f0.which] + " , " + num*4 + "($fp)");
      else
	      emit("lw" + regstr[n.f1.f0.which] + " , " + (num + cmagic)*4 + "($sp)");
    	  
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      int num = Integer.parseInt(n.f1.f1.f0.tokenImage);
      if(num < amagic)
	      emit("sw" + regstr[n.f2.f0.which] + " , " + num*4 + "($sp)");
      else
	      emit("sw" + regstr[n.f2.f0.which] + " , " + (num + cmagic)*4 + "($sp)");
//      emit("sw" + regstr[n.f2.f0.which] + " , "  + num*4 + "($sp)" );
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      emit("sw " + regstr[n.f2.f0.which] + ", " + (Integer.parseInt(n.f1.f0.tokenImage)*4 - 4) + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      emit("jalr " + regstr[((Reg)n.f1.f0.choice).f0.which]);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }
   

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      if(lbflag) System.out.print(n.f0.tokenImage+": ");
      n.f0.accept(this);
      return _ret;
   }
   
   void emit(String s){
	   System.out.println(s);
   }

}
