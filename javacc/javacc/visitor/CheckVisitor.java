//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class CheckVisitor<R> extends GJNoArguDepthFirst<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	String[] typearr = {"intarray", "boolean","int", "ident"};
	ArrayList<String> curtypelist = new ArrayList<String>();
	Stack<ArrayList<String>> paramst = new Stack<>();
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            Node tmp = e.nextElement();
            tmp.accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
	  
	  current = top;
	  
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      
      ClassData mn = top.classes.get(n.f1.f0.tokenImage);
      curcl = mn;
      current = mn;
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      return (R) mn;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      current = top.classes.get(n.f1.f0.tokenImage);
      curcl = (ClassData) current;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return null;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      ClassData cd = new ClassData();
      cd.name = n.f1.f0.tokenImage;
      cd.parent = top.lookup(n.f1.f0.tokenImage);
      current = cd;
      top.classes.put(cd.name, cd);
      position = 0;
      curcl = cd;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return null;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
	  current = curcl.flookup(n.f2.f0.tokenImage);
	  
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      return null;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      n.f0.accept(this);
      n.f1.accept(this);
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      String temp = (String)n.f0.accept(this);
      String lexp;
      if(((FuncData)current).vars.containsKey(temp)){
	       lexp = ((FuncData)current).vars.get(temp).type;
      }
      else{
    	   lexp = ((VarData)curcl.lookup(temp)).type;
      }
      n.f1.accept(this);
      String rexp = (String)n.f2.accept(this);
      if(!lexp.equals(rexp)){
    	  System.out.print("Assignment error");
      }
      n.f3.accept(this);
      return null;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      String lexp = (String)n.f0.accept(this);
      VarData v = (VarData) ((FuncData)current).lookup(lexp);
      if(!v.type.equals("int[]")){
    	  System.out.print("Non array indexed");
    	  System.exit(1);
      }
      
      n.f1.accept(this);
      n.f2.accept(this);
      if(!n.f2.accept(this).equals("int")){
    	  System.out.print("Non integer index used");
    	  System.exit(1);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      if(!n.f5.accept(this).equals("int")){
    	  System.out.print("Non integer array assignment");
    	  System.exit(1);
      }
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      n.f0.accept(this);
      n.f1.accept(this);
      if( !n.f2.accept(this).equals("boolean")){
    	  System.out.print("non boolean if");
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return null;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      if( !n.f2.accept(this).equals("boolean")){
    	  System.out.print("non boolean while");
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String ptemp =  (String)n.f2.accept(this);
      if(!ptemp.equals("int")){
    	  System.out.print("print statement error");
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      String lexp = (String) n.f0.accept(this);
      n.f1.accept(this);
      String rexp = (String)n.f2.accept(this);
      if(! (lexp.equals("boolean")&& (rexp.equals("boolean")))){
    	  System.out.print("AndExpression Error");
    	  System.exit(1);
      }
      return (R) "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      String lexp = (String)n.f0.accept(this);
      n.f1.accept(this);
      String rexp = (String)n.f2.accept(this);
      if(! (lexp.equals("int")&& (rexp.equals("int")))){
    	  System.out.print("CompareExpression Error");
    	  System.exit(1);
      }
      return (R) "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      String lexp = (String)n.f0.accept(this);
      n.f1.accept(this);
      String rexp = (String)n.f2.accept(this);
      if(! (lexp.equals("int")&& (rexp.equals("int")))){
    	  System.out.print("PlusExpression Error");
    	  System.exit(1);
      }
      return (R) "int";
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      String lexp = (String)n.f0.accept(this);
      n.f1.accept(this);
      String rexp = (String)n.f2.accept(this);
      if(! (lexp.equals("int")&& (rexp.equals("int")))){
    	  System.out.print("MinusExpression Error");
    	  System.exit(1);
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      String lexp = (String)n.f0.accept(this);
      n.f1.accept(this);
      String rexp = (String)n.f2.accept(this);
      if(! (lexp.equals("int")&& (rexp.equals("int")))){
    	  System.out.print("TimesExpression Error");
    	  System.exit(1);
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      String lexp = (String)n.f0.accept(this);
      VarData v = (VarData) ((FuncData)current).lookup(lexp);
      if(!v.type.equals("int[]")){
    	  System.out.print("Non array indexed");
    	  System.exit(1);
      }
      
      n.f1.accept(this);
      if(!n.f2.accept(this).equals("int")){
    	  System.out.print("Non integer index used");
    	  System.exit(1);
      }
      n.f3.accept(this);
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      String lexp = (String)n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      VarData v = (VarData) ((FuncData)current).lookup(lexp);
      if(!v.type.equals("int[]")){
    	  System.out.print("Non array length called");
    	  System.exit(1);
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
	   paramst.push(curtypelist);
      curtypelist = new ArrayList<String>();
      String instancetype = (String) n.f0.accept(this);
	  ClassData cd = (ClassData)(top.classes.get(instancetype));
      if(!cd.meth.containsKey(n.f2.f0.tokenImage)){
    	  System.out.print("Method not found");
    	  System.exit(1);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      FuncData fd = cd.flookup(n.f2.f0.tokenImage);
      if(!fd.paramlist.equals(curtypelist))
    	  System.out.print("Parameter error");
      curtypelist = paramst.pop();
      return (R)fd.ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
	  curtypelist.add((String)n.f0.accept(this));
      n.f1.accept(this);
      return null;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
	  curtypelist.add((String)n.f1.accept(this));
      n.f0.accept(this);
      n.f1.accept(this);
      return null;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      R temp = n.f0.accept(this);
      String[] primExpAr = {"int", "boolean","boolean", "id","this", "arrayalloc","not","brac"};
      switch(n.f0.which){
      case 0:
    	  return (R) "int";
      case 1:
    	  return (R) "boolean";
      case 2:
    	  return (R) "boolean";
      case 3:
    	  return (R) ((VarData)current.lookup((String)temp)).type;
      case 4:
    	  return (R) (curcl.name);
      case 5:
    	  return (R)"int[]";
      case 6:
    	  return (R) temp;
      case 7:
    	  return (R) "boolean";
      case 8:
    	  return (R) temp;
	  default:
    	  return null;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      n.f0.accept(this);
      return (R) n.f0.tokenImage;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      if(!top.classes.containsKey(n.f1.f0.tokenImage)){
    	  System.out.print("new object error");
      }
      return (R) n.f1.f0.tokenImage;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      n.f0.accept(this);
      n.f2.accept(this);
      return (R)n.f1.accept(this);
   }

}
